name: Build APK

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: "User ID for API calls"
        required: true
        type: string
      branch:
        description: "Branch to build from"
        required: true
        type: string
        default: "master"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repo (for secrets & keystore)
        uses: actions/checkout@v4

      - name: Checkout AndroidAPS upstream
        uses: actions/checkout@v4
        with:
          repository: nightscout/AndroidAPS
          path: AndroidAPS_upstream

      - name: Signing on
        run: |
          curl -X POST "${{ secrets.API_URL_SIGNING_ON }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -d '{"user_id":"${{github.event.inputs.user_id}}", "run_id":"${{ github.run_id }}"}'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.10

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEY_BASE64 }}" > androidaps.keystore.base64
          base64 -d androidaps.keystore.base64 > androidaps.keystore
          rm androidaps.keystore.base64
          # Copy keystore to the upstream repo
          cp androidaps.keystore AndroidAPS_upstream/androidaps.keystore

      - name: Grant execute permission for gradlew
        run: chmod +x AndroidAPS_upstream/gradlew

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Print Availability Secrets
        run: |
          echo "Available secrets:"
          echo "KEY_BASE64: ${{ secrets.KEY_BASE64 != '' && '✓' || '✗' }}"
          echo "SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS != '' && '✓' || '✗' }}"
          echo "SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD != '' && '✓' || '✗' }}"
          echo "SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD != '' && '✓' || '✗' }}"

      - name: Patch build.gradle for Signing
        run: |
          cd AndroidAPS_upstream
          cat >> app/build.gradle << 'EOF'

          android {
              signingConfigs {
                  release {
                      storeFile file("$GITHUB_WORKSPACE/AndroidAPS_upstream/androidaps.keystore")
                      storePassword "${{ secrets.SIGNING_STORE_PASSWORD }}"
                      keyAlias "${{ secrets.SIGNING_KEY_ALIAS }}"
                      keyPassword "${{ secrets.SIGNING_KEY_PASSWORD }}"
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF

      - name: Build Release APK
        run: |
          cd AndroidAPS_upstream
          ./gradlew assembleRelease --stacktrace --info

      - name: Verify Keystore
        run: |
          ls -la AndroidAPS_upstream/androidaps.keystore
          file AndroidAPS_upstream/androidaps.keystore

      - name: Print Gradle Properties
        run: |
          cd AndroidAPS_upstream
          ./gradlew properties | grep "signing"

      - name: Run Signing Report
        run: |
          cd AndroidAPS_upstream
          ./gradlew signingReport

      - name: Debug Build Output
        run: |
          echo "Current directory:"
          pwd
          echo "Listing build outputs:"
          ls -R AndroidAPS_upstream/app/build/outputs/

      - name: Upload Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: AndroidAPS_upstream/app/build/outputs/apk/full/release/app-full-release.apk

      - name: Signing off
        run: |
          curl -X POST "${{ secrets.API_URL_SIGNING_OFF }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -d '{"user_id":"${{ github.event.inputs.user_id }}", "run_id":"${{ github.run_id }}", "download_url":"${{ steps.upload-artifact.outputs.artifact-url }}"}'

      - name: Send email
        run: |
          curl -X POST "${{ secrets.API_URL_SEND_MAIL }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -d '{"user_id":"${{github.event.inputs.user_id}}", "run_id":"${{ github.run_id }}"}'
